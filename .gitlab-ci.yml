variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  CHROME_OPTIONS: "--no-sandbox --headless --disable-dev-shm-usage"
  DOCKER_TLS_CERTDIR: "/certs"
  CHROMEDRIVER_VERSION: "114.0.5735.90"
  FF_USE_LEGACY_ARTIFACTS_UPLOAD: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  TRANSFER_METER_FREQUENCY: "2s"
  GIT_STRATEGY: clone

image: maven:3.9.6-eclipse-temurin-17

services:
  - name: docker:dind
    command: ["--tls=false"]

cache:
  paths:
    - .m2/repository
    - .cache/selenium
  key: "$CI_COMMIT_REF_SLUG"

stages:
  - test
  - deploy

test:
  stage: test
  before_script: |
    apt-get update && apt-get install -y wget unzip curl gnupg2
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
    apt-get update && apt-get install -y google-chrome-stable
    mkdir -p .cache/selenium
    wget -q -O /tmp/chromedriver.zip "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/114.0.5735.90/linux64/chromedriver-linux64.zip"
    unzip -q /tmp/chromedriver.zip -d /tmp
    mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
    chmod +x /usr/local/bin/chromedriver
    echo "Chrome version: $(google-chrome --version)"
    echo "ChromeDriver version: $(chromedriver --version)"
    export CHROME_BIN=/usr/bin/google-chrome
  script: |
    set -e
    echo "üöÄ Starting test execution..."
    java -version
    mvn -version
    echo "Configuring Chrome options..."
    export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --remote-debugging-port=9222"
    
    # Test ve rapor olu≈üturma
    mvn clean test allure:report || {
      echo "‚ùå Test or report generation failed"
      mkdir -p target/allure-results target/allure-report target/test-logs
      touch target/allure-results/.gitkeep
      touch target/allure-report/.gitkeep
      touch target/test-logs/.gitkeep
    }
    
    # Artifact'larƒ± hazƒ±rla
    if [ -d "target" ] && [ "$(ls -A target)" ]; then
      tar czf artifacts.tar.gz -C target .
      echo "Artifacts compressed successfully"
    else
      echo "No artifacts to upload"
      touch artifacts.tar.gz
    fi
  after_script:
    - echo "Cleaning up temporary files..."
    - find . -type f -name "*.tmp" -delete
    - find . -type f -size +100M -delete
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    paths:
      - artifacts.tar.gz
    expire_in: 1 week
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  rules:
    - if: $CI_COMMIT_BRANCH
      when: always
  allow_failure: true

pages:
  stage: deploy
  dependencies:
    - test
  script: |
    mkdir -p public
    if [ -f artifacts.tar.gz ]; then
      tar xzf artifacts.tar.gz
    else
      echo "<html><body><h1>No Artifacts Available</h1></body></html>" > public/index.html
    fi
    
    if [ -d "allure-report" ] && [ "$(ls -A allure-report/)" ]; then
      cp -r allure-report/* public/
    else
      echo "<html><body><h1>No Test Report Available</h1></body></html>" > public/index.html
    fi
    
    # Summary olu≈ütur
    {
      echo "Test Summary"
      echo "============"
      echo "Build: $CI_BUILD_ID"
      echo "Branch: $CI_COMMIT_REF_NAME"
      echo "Commit: $CI_COMMIT_SHA"
      echo "Date: $(date)"
      echo
      echo "Test Results"
      echo "============"
      if [ -f surefire-reports/TEST-*.xml ]; then
        grep -h "<testcase" surefire-reports/TEST-*.xml | wc -l | xargs echo "Total Tests:"
        grep -h "<failure" surefire-reports/TEST-*.xml | wc -l | xargs echo "Failed Tests:"
      else
        echo "No test results available"
      fi
    } > public/summary.txt
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - main