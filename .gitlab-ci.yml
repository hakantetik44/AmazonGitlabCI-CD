variables:
 MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
 FF_USE_LEGACY_ARTIFACTS_UPLOAD: "true"
 SELENIUM_URL: "http://selenium-chrome:4444/wd/hub"
 CHROME_OPTIONS: "--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1920,1080"

image: maven:3.9.6-eclipse-temurin-17

services:
 - name: selenium/standalone-chrome:latest
   alias: selenium-chrome

cache:
 paths:
   - .m2/repository
 key: "$CI_COMMIT_REF_SLUG"

stages:
 - test
 - report
 - deploy

test:
 stage: test
 before_script:
   - apt-get update && apt-get install -y jq
 script:
   - echo "🚀 Tests başlatılıyor..."
   - echo "⚙️ Maven ayarları yapılandırılıyor..."
   - |
     export MAVEN_OPTS="$MAVEN_OPTS \
       -Dselenium.grid.url=$SELENIUM_URL \
       -Dwebdriver.chrome.whitelistedIps= \
       -Dcucumber.publish.quiet=true \
       -Dwebdriver.timeouts.implicitlywait=30000 \
       -Dwebdriver.timeouts.pageLoadTimeout=30000"

   - echo "🧪 Testler çalıştırılıyor..."
   - |
     echo "📋 Test Senaryoları:"
     echo "-------------------"
     mvn clean test -Dtest=TestRunner \
       -Dcucumber.plugin="pretty:target/cucumber-reports/pretty.txt,\
       html:target/cucumber-reports/report.html,\
       json:target/cucumber-reports/cucumber.json,\
       io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm,\
       rerun:target/cucumber-reports/rerun.txt,\
       usage:target/cucumber-reports/usage.json,\
       junit:target/cucumber-reports/junit.xml,\
       message:target/cucumber-reports/messages.ndjson" \
       -Dcucumber.execution.dry-run=false \
       -Dcucumber.execution.strict=true \
       -Dcucumber.execution.parallel.enabled=false \
       -Dcucumber.ansi-colors.disabled=false \
       -Dcucumber.filter.tags="not @ignore" \
       -Dcucumber.snippet-type=camelcase \
       -Dselenium.grid.url=$SELENIUM_URL || true

   - |
     if [ -f "target/cucumber-reports/cucumber.json" ]; then
       echo ""
       echo "📊 Test Sonuçları:"
       echo "----------------"
       echo "✨ Senaryo Detayları:"
       
       for feature in $(jq -r '.[] | @base64' target/cucumber-reports/cucumber.json); do
         _jq() {
           echo ${feature} | base64 --decode | jq -r ${1}
         }
         
         FEATURE_NAME=$(_jq '.name')
         echo "🌟 Feature: $FEATURE_NAME"
         
         echo "  📝 Senaryolar:"
         for scenario in $(_jq '.elements[] | @base64'); do
           _jq2() {
             echo ${scenario} | base64 --decode | jq -r ${1}
           }
           
           SCENARIO_NAME=$(_jq2 '.name')
           SCENARIO_TYPE=$(_jq2 '.type')
           echo "    🔹 $SCENARIO_NAME ($SCENARIO_TYPE)"
           
           echo "      Adımlar:"
           for step in $(_jq2 '.steps[] | @base64'); do
             _jq3() {
               echo ${step} | base64 --decode | jq -r ${1}
             }
             
             STEP_NAME=$(_jq3 '.keyword + " " + .name')
             STEP_STATUS=$(_jq3 '.result.status')
             STEP_DURATION=$(_jq3 '.result.duration')
             
             case $STEP_STATUS in
               "passed")  ICON="✅";;
               "failed")  ICON="❌";;
               "skipped") ICON="⏭️";;
               "pending") ICON="⏳";;
               *)        ICON="❓";;
             esac
             
             echo "        $ICON $STEP_NAME"
             if [ "$STEP_STATUS" = "failed" ]; then
               ERROR_MESSAGE=$(_jq3 '.result.error_message')
               echo "        ❗ Hata: $ERROR_MESSAGE"
             fi
           done
         done
       done

       echo ""
       echo "📈 Test İstatistikleri:"
       PASSED=$(jq '[.[] | .elements[] | .steps[] | select(.result.status == "passed")] | length' target/cucumber-reports/cucumber.json)
       FAILED=$(jq '[.[] | .elements[] | .steps[] | select(.result.status == "failed")] | length' target/cucumber-reports/cucumber.json)
       SKIPPED=$(jq '[.[] | .elements[] | .steps[] | select(.result.status == "skipped")] | length' target/cucumber-reports/cucumber.json)
       PENDING=$(jq '[.[] | .elements[] | .steps[] | select(.result.status == "pending")] | length' target/cucumber-reports/cucumber.json)
       TOTAL=$((PASSED + FAILED + SKIPPED + PENDING))
       
       echo "✅ Başarılı Adım: $PASSED"
       echo "❌ Başarısız Adım: $FAILED"
       echo "⏭️ Atlanan Adım: $SKIPPED"
       echo "⏳ Bekleyen Adım: $PENDING"
       echo "📊 Toplam Adım: $TOTAL"
       
       # Test sonuçlarını özet dosyasına yaz
       {
         echo "Test Özeti"
         echo "=========="
         echo "Tarih: $(date)"
         echo "Branch: $CI_COMMIT_REF_NAME"
         echo "Commit: $CI_COMMIT_SHA"
         echo ""
         echo "Sonuçlar:"
         echo "✅ Başarılı: $PASSED"
         echo "❌ Başarısız: $FAILED"
         echo "⏭️ Atlanan: $SKIPPED"
         echo "⏳ Bekleyen: $PENDING"
         echo "📊 Toplam: $TOTAL"
         
         if [ "$FAILED" -gt 0 ]; then
           echo ""
           echo "❗ Başarısız Test Detayları:"
           jq -r '.[] | .elements[] | select(.steps[].result.status == "failed") | "Feature: \(.name)\nSenaryo: \(.name)\nHata: \(.steps[] | select(.result.status == "failed") | .result.error_message)"' target/cucumber-reports/cucumber.json
         fi
       } > test_summary.txt
     fi

   - echo "📋 Allure raporu oluşturuluyor..."
   - mvn allure:report || true
   - echo "✅ Test aşaması tamamlandı"

 artifacts:
   when: always
   reports:
     junit:
       - target/cucumber-reports/junit.xml
       - target/surefire-reports/TEST-*.xml
   paths:
     - target/allure-results/
     - target/allure-report/
     - target/cucumber-reports/
     - target/surefire-reports/
     - test_summary.txt
   expire_in: 1 week

# (allure-report ve pages stage'leri aynı kalacak)
